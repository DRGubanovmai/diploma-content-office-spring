package com.example.diplomacontentofficespring.service.service.transform.processors;

import com.example.diplomacontentofficespring.service.bos.MarkingSequence;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.*;
import java.nio.file.Files;
import java.util.regex.Pattern;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import javax.xml.stream.XMLStreamException;
import lombok.extern.slf4j.Slf4j;
import org.apache.tomcat.util.http.fileupload.IOUtils;

/**
 * –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ zip –∞—Ä—Ö–∏–≤–∞.
 *
 * @author Alexander Korznikov
 * @since 0.1.0
 */
@Slf4j
public class ZipProcessor {

	/**
	 * path to document/style xml files.
	 */
	private static final String WORD_PATH = "word/";

	/**
	 * style.xml file
	 */
	public static final String STYLES_XML = "styles.xml";

	/**
	 * document.xml file
	 */
	public static final String DOCUMENT_XML = "document.xml";

	/**
	 * style.xml Zip entry.
	 */
	public static final String STYLES_XML_ZIP_ENTRY = WORD_PATH + STYLES_XML;

	/**
	 * document.xml Zip entry.
	 */
	public static final String DOCUMENT_XML_ZIP_ENTRY = WORD_PATH + DOCUMENT_XML;

	/**
	 * document.xml Zip entry.
	 */
	public static final String SLIDE_XML = "ppt/slides/slide\\d+.xml";

	/**
	 * –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–Ω–µ—Å–µ–Ω–Ω—ã—Ö –∏–ª–∏ –≤–Ω–æ—Å–∏—Ö–º—ã –º–∞—Ä–∫–∏—Ä–æ–≤–æ–∫.
	 */
	private final MarkingSequence sequence;

	/**
	 * –ü—Ä–æ—Ü–µ—Å—Å–µ—Ä–æ–º –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –≤–∏–¥ –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
	 * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ {@link PrepareDocumentProcessor},
	 * –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ {@link MarkingProcessor}
	 */
	private final OfficeProcessor processor;

	public ZipProcessor(MarkingSequence sequence, OfficeProcessor processor) {
		this.sequence = sequence;
		this.processor = processor;
	}

	/**
	 * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ MS Word —Ñ–∞–π–ª–∞. –ë–µ–∑ –æ—à–∏–±–æ–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–º –∞—Ä—Ö–∏–≤–µ, –Ω–æ —Å–º—ã–ª–∞ –≤ —ç—Ç–æ–º –Ω–µ—Ç.
	 * –í–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç DOCX/PPTX —Ñ–∞–π–ª –∫–∞–∫ ZIP –∞—Ä—Ö–∏–≤. –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏–∑ input, –∏ –∫–∞–∂–¥—É—é zipEntry –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫,
	 * –∫—Ä–æ–º–µ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–∏—Å—É—é—Ç word/document.xml –∏ word/styles.xml, –∏–ª–∏, ppt/slides/slide[number].xml –≤ –∫–æ—Ç–æ—Ä—ã–µ –∏ –≤–Ω–æ—Å—è—Ç—Å—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏.
	 *
	 * @param input - –≤—Ö–æ–¥–Ω–æ–π DOC/DOCX —Ñ–∞–π–ª.
	 * @param out   - –≤—ã—Ö–æ–¥–Ω–æ–π (–º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) DOC/DOCX —Ñ–∞–π–ª.
	 * @throws IOException        - —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —á—Ç–µ–Ω–∏–µ–º/–∑–∞–ø–∏—Å—å—é.
	 * @throws XMLStreamException - —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å XML.
	 */
	public void process(InputStream input, OutputStream out) throws IOException, XMLStreamException {
		ZipInputStream zis = new ZipInputStream(input);
		ZipOutputStream zos = new ZipOutputStream(out);
		try (zis; zos) {
			Pattern pattern = Pattern.compile(SLIDE_XML);

			File stylesXml = null;
			File documentXml = null;

			ZipEntry entry;
			while ((entry = zis.getNextEntry()) != null) {
				String name = entry.getName();
				log.info("Processing next entry {} with comment {}", name, entry.getComment());

				if (STYLES_XML_ZIP_ENTRY.equalsIgnoreCase(name)) {
					log.info("üÖ∞ Styles process {}", name);
					stylesXml = Files.createTempFile("styles", ".xml").toFile();
					try (FileOutputStream fos = new FileOutputStream(stylesXml)) {
						IOUtils.copy(zis, fos);
					}

				} else if (DOCUMENT_XML_ZIP_ENTRY.equalsIgnoreCase(name)) {
					log.info("üî† Document process {}", name);
					documentXml = Files.createTempFile("document", ".xml").toFile();
					try (FileOutputStream fos = new FileOutputStream(documentXml)) {
						IOUtils.copy(zis, fos);
					}

				} else if (pattern.matcher(name).matches()) {
					log.info("üÖ∞ Slides process {}", name);
					log.info("New result entry was created.");
					ZipEntry newEntry = new ZipEntry(name);
					zos.putNextEntry(newEntry);
					processor.processSlides(zis, zos);

				} else {
					ZipEntry newEntry = new ZipEntry(name);
					zos.putNextEntry(newEntry);
					log.debug("üö´ Skip {}", name);
					IOUtils.copy(zis, zos);
				}

				zos.closeEntry();
				zis.closeEntry();
				out.flush();
			}

			if (stylesXml != null && documentXml != null) {
				processStyles(stylesXml, zos);
				processDocument(documentXml, zos);
			}

			log.info("seq - \n{}", new ObjectMapper().writeValueAsString(sequence));
			log.info("All done!");
		}
	}

	/**
	 * –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ style.xml —Ñ–∞–π–ª–∞. –ë–µ—Ä–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π temp —Ñ–∞–π–ª,
	 * –°–æ–∑–¥–∞–µ—Ç –∑–∏–ø —ç–Ω—Ç—Ä–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
	 */
	private void processStyles(File stylesXml, ZipOutputStream zos) throws IOException, XMLStreamException {
		try (FileInputStream stylesXmlInputStream = new FileInputStream(stylesXml)) {
			ZipEntry stylesXmlEntry = new ZipEntry(STYLES_XML_ZIP_ENTRY);
			zos.putNextEntry(stylesXmlEntry);
			processor.processStyles(stylesXmlInputStream, zos);
		} finally {
			stylesXml.delete();
		}
	}

	/**
	 * –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ document.xml —Ñ–∞–π–ª–∞. –ë–µ—Ä–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π temp —Ñ–∞–π–ª,
	 * –°–æ–∑–¥–∞–µ—Ç –∑–∏–ø —ç–Ω—Ç—Ä–∏ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
	 */
	private void processDocument(File documentXml, ZipOutputStream zos) throws IOException, XMLStreamException {
		try (FileInputStream documentXmlInputStream = new FileInputStream(documentXml)) {
			ZipEntry documentXmlEntry = new ZipEntry(DOCUMENT_XML_ZIP_ENTRY);
			zos.putNextEntry(documentXmlEntry);
			processor.processDocument(documentXmlInputStream, zos);
		} finally {
			documentXml.delete();
		}
	}
}

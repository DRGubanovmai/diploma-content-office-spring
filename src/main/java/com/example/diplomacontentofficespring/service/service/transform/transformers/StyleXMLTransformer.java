package com.example.diplomacontentofficespring.service.service.transform.transformers;

import com.example.diplomacontentofficespring.service.bos.Style;
import com.example.diplomacontentofficespring.service.bos.WordSequence;
import com.example.diplomacontentofficespring.service.service.transform.XMLNames;
import com.example.diplomacontentofficespring.service.service.transform.processors.PrepareDocumentProcessor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.events.Attribute;
import javax.xml.stream.events.EndElement;
import javax.xml.stream.events.StartElement;
import javax.xml.stream.events.XMLEvent;
import lombok.Builder;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;

/**
 * –ü—Ä–æ—Ü–µ—Å—Å–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ styles.xml —Ñ–∞–π–ª–∞.
 *
 * @author Alexander Korznikov
 * @since 0.1.0
 */
@Slf4j
public class StyleXMLTransformer extends AbstractXMLTransformer<WordSequence> {

	/**
	 * –§–ª–∞–≥ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏, —á—Ç–æ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —ç–≤–µ–Ω—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –∞—É—Ç–ø—É—Ç.
	 */
	boolean isSkippable;

	/**
	 * –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤.
	 */
	@Getter
	PrepareDocumentProcessor.ResetContext resetContext;

	/**
	 * –°–æ–±—ã—Ç–∏—è –¥–æ w:name.
	 */
	List<XMLEvent> beforeNameTagEvent;

	/**
	 * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
	 */
	@Builder
	public StyleXMLTransformer(InputStream input, OutputStream output, WordSequence sequence) throws XMLStreamException {
		super(input, output, sequence);
		beforeNameTagEvent = new ArrayList<>();
		resetContext = new PrepareDocumentProcessor.ResetContext();
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ styles.xml —Ñ–∞–π–ª–∞.
	 * –ü–æ —Å—É—Ç–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∏–ª–µ–º –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –∞—É—Ç–ø—É—Ç —Å—Ç—Ä–∏–º.
	 */
	@Override
	public void mark() throws XMLStreamException {
		while (reader.hasNext()) {
			//–ü–æ–π–º–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è </styles> –∏ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –ø–∞—Ä—É —Ç—Ä–æ–π–∫—É —Å–æ–±—ã—Ç–∏–π!
			// –ù–æ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞–¥–æ –ø–æ –¥—Ä—É–≥–æ–º—É!
			XMLEvent event = reader.nextEvent();

			// –µ—Å–ª–∏ </styles>
			if (event.isEndElement()) {
				EndElement el = event.asEndElement();
				if (XMLNames.STYLES_TAG.equals(el.getName().getLocalPart())) {
					for (Style customStyle : sequence.getStyles()) {
						if (customStyle.getStyleId().equals(XMLNames.EMPTY_STYLE)) {
							continue;
						}
						log.info("üÖ∞  Add custom style with id {}", customStyle.getStyleId());
						try {
							customStyle.printOut(output);
						} catch (IOException e) {
							log.error("Can't printout new styles into XML output.", e);
							throw new XMLStreamException("Can't output new styles", e);
						}
					}
				}
			}
			writer.add(event);
		}
		writer.close();
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ style.xml —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –≤ –Ω–µ–º.
	 */
	public void prepare() throws XMLStreamException {
		while (reader.hasNext()) {
			XMLEvent event = reader.nextEvent();

			if (event.isStartElement()) {
				StartElement start = event.asStartElement();

				if (XMLNames.STYLE_TAG.equals(start.getName().getLocalPart())) {
					log.debug("Start style tag");
					event = startStyleTag(start);
				} else if (XMLNames.NAME_TAG.equals(start.getName().getLocalPart())) {
					log.debug("Start name tag");
					event = startNameTag(start);
				} else {
					log.debug("Start other tag");
					event = startEvent(start);
				}

			} else if (event.isEndElement()) {
				EndElement end = event.asEndElement();
				if (XMLNames.STYLE_TAG.equals(end.getName().getLocalPart())) {
					log.debug("End style tag");
					event = endStyle(end);
				} else if (XMLNames.STYLES_TAG.equals(end.getName().getLocalPart())) {
					log.debug("Add 0 spacing style");
					Style style = new Style(XMLNames.EMPTY_STYLE, 0);
					try {
						style.printOut(output);
					} catch (IOException e) {
						log.error("Can't printout new styles into XML output.", e);
						throw new XMLStreamException("Can't output new styles", e);
					}
				} else {
					log.debug("End other tag");
					event = endEvent(end);
				}
			}

			if (event != null) {
				log.debug("add event {}", event);
				writer.add(event);
			}
		}
		writer.close();
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—ç–≥–∞ w:name –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –∏—â—É—Ç—Å—è –Ω–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
	 * –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è id –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ r7office. –ï—Å–ª–∏ –∏—Ö –≤–Ω—É—Ç—Ä–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–≥–∞ –∏—Ö –Ω–µ—Ç, —Ç–æ
	 * –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ, —á—Ç–æ –∑–∞–ø–æ–º–Ω–∏–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –∏ —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –≤ false.
	 */
	private XMLEvent startNameTag(StartElement start) throws XMLStreamException {
		if (isSkippable) {
			Iterator<Attribute> attributeIterator = start.getAttributes();
			while (attributeIterator.hasNext()) {
				Attribute styleAttribute = attributeIterator.next();
				if (styleAttribute.getValue().equals("et_0")
						|| styleAttribute.getValue().equals("et_1")
						|| styleAttribute.getValue().equals("et_2")
						|| styleAttribute.getValue().equals("et_3")) {
					saveStyleId();
					return null;
				}
			}
		}
		isSkippable = false;
		addBeforeNameTagEvents();
		return start;
	}

	/**
	 * –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è id –Ω–∞—à–∏—Ö —Å—Ç–∏–ª–µ–π –∏–∑–º–µ–Ω–Ω—ã—Ö r7office –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
	 */
	private void saveStyleId() {
		XMLEvent event = beforeNameTagEvent.get(beforeNameTagEvent.size() - 1);
		if (event.isStartElement()) {
			StartElement start = event.asStartElement();
			if (XMLNames.STYLE_TAG.equals(start.getName().getLocalPart())) {
				log.debug("Start style tag");
				Iterator<Attribute> attributeIterator = start.getAttributes();
				while (attributeIterator.hasNext()) {
					Attribute styleAttribute = attributeIterator.next();
					if (styleAttribute.getName().getLocalPart().equals("styleId")) {
						resetContext.getStyleIds().add(styleAttribute.getValue());
					}

				}
			}
		}
	}

	/**
	 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–≤–µ–Ω—Ç–æ–≤ –∑–∞–ø–æ–º–Ω–µ–Ω–Ω—ã—Ö –¥–æ —Ç—ç–≥–∞ w:name –≤ output.
	 */
	private void addBeforeNameTagEvents() throws XMLStreamException {
		for (XMLEvent event : beforeNameTagEvent) {
			writer.add(event);
		}
		beforeNameTagEvent.clear();
	}

	/**
	 * –ù–∞—á–∞–ª–æ —Ç—ç–≥–∞ w:style –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫ –≤ true –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —ç—Ç–æ—Ç —ç–≤–µ–Ω—Ç.
	 */
	private XMLEvent startStyleTag(StartElement start) {
		if (!isSkippable) {
			isSkippable = true;
			beforeNameTagEvent.add(start);
		}
		return null;
	}

	/**
	 * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ <w:style></w:style>.
	 *
	 * @return null, –µ—Å–ª–∏ —Ç–µ–≥ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ output –∏–ª–∏ event –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	 */
	private XMLEvent endEvent(EndElement end) {
		if (isSkippable) {
			beforeNameTagEvent.add(end);
			return null;
		}
		return end;
	}

	/**
	 * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ <w:style></w:style>.
	 *
	 * @return null, –µ—Å–ª–∏ —Ç–µ–≥ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ output –∏–ª–∏ event –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	 */
	private XMLEvent startEvent(StartElement start) {
		if (isSkippable) {
			beforeNameTagEvent.add(start);
			return null;
		}
		return start;
	}

	/**
	 * –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–≥–∞ <w:style></w:style>.
	 * –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞—Ç–Ω–æ.
	 *
	 * @return null, –µ—Å–ª–∏ —Ç–µ–≥ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ output –∏–ª–∏ event –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	 */
	private XMLEvent endStyle(EndElement end) {
		if (isSkippable) {
			isSkippable = false;
			return null;
		}
		return end;
	}
}
